{
  "author": {
    "name": "kazuhide maruyama"
  },
  "name": "grunt-typescript",
  "description": "compile typescript to javascript",
  "version": "0.3.0",
  "homepage": "https://github.com/k-maru/grunt-typescript",
  "repository": {
    "type": "git",
    "url": "git@github.com:k-maru/grunt-typescript.git"
  },
  "bugs": {
    "url": "https://github.com/k-maru/grunt-typescript/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/k-maru/grunt-typescript/blob/master/LICENSE"
    }
  ],
  "main": "Gruntfile.js",
  "scripts": {
    "start": "grunt build",
    "test": "grunt test"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "typescript": "1.0.0",
    "q": "~1.0.0",
    "chokidar": "~0.8.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.2"
  },
  "devDependencies": {
    "grunt": "~0.4.2",
    "typescript": "1.0.0",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-nodeunit": "~0.2.2",
    "q": "~1.0.0",
    "chokidar": "~0.8.1"
  },
  "optionalDependencies": {},
  "keywords": [
    "gruntplugin",
    "typescript"
  ],
  "readme": "grunt-typescript\r\n================\r\n[![Build Status](https://travis-ci.org/k-maru/grunt-typescript.png?branch=master)](https://travis-ci.org/k-maru/grunt-typescript) [![NPM version](https://badge.fury.io/js/grunt-typescript.png)](http://badge.fury.io/js/grunt-typescript)\r\n\r\n[![NPM](https://nodei.co/npm/grunt-typescript.png?downloads=true)](https://nodei.co/npm/grunt-typescript/)\r\n\r\nCompile TypeScript in Grunt\r\n\r\n[Release Note](CHANGELOG.md)\r\n\r\n## Documentation\r\nYou'll need to install `grunt-typescript` first:\r\n\r\n    npm install grunt-typescript --save-dev\r\n\r\nor add the following line to devDependencies in your package.json\r\n\r\n    \"grunt-typescript\": \"\",\r\n\r\nThen modify your `Gruntfile.js` file by adding the following line:\r\n\r\n    grunt.loadNpmTasks('grunt-typescript');\r\n\r\nThen add some configuration for the plugin like so:\r\n\r\n    grunt.initConfig({\r\n        ...\r\n        typescript: {\r\n          base: {\r\n            src: ['path/to/typescript/files/**/*.ts'],\r\n            dest: 'where/you/want/your/js/files',\r\n            options: {\r\n              module: 'amd', //or commonjs\r\n              target: 'es5', //or es3\r\n              basePath: 'path/to/typescript/files',\r\n              sourceMap: true,\r\n              declaration: true\r\n            }\r\n          }\r\n        },\r\n        ...\r\n    });\r\n   \r\nIf you want to create a js file that is a concatenation of all the ts file (like -out option from tsc), \r\nyou should specify the name of the file with the '.js' extension to dest option.\r\n\r\n    grunt.initConfig({\r\n        ...\r\n        typescript: {\r\n          base: {\r\n            src: ['path/to/typescript/files/**/*.ts'],\r\n            dest: 'where/you/want/your/js/file.js',\r\n            options: {\r\n              module: 'amd', //or commonjs\r\n            }\r\n          }\r\n        },\r\n        ...\r\n    });\r\n\r\n##Options\r\n\r\n###noLib `boolean`\r\nDo not include a default lib.d.ts with global declarations\r\n\r\n###target `string`\r\nSpecify ECMAScript target version: \"ES3\" (default) or \"ES5\"\r\n\r\n###module `string`\r\nSpecify module code generation: \"commonjs\" (default) or \"amd\"\r\n\r\n###sourceMap `boolean`\r\nGenerates corresponding .map files\r\n\r\n###declaration `boolean`\r\nGenerates corresponding .d.ts file\r\n\r\n###comments `boolean`\r\nEmit comments to output\r\n\r\n###noImplicitAny `boolean`\r\nWarn on expressions and declarations with an implied 'any' type.\r\n\r\n###noResolve `boolean`\r\nSkip resolution and preprocessing.\r\n\r\n##Original Options\r\n\r\n###newLine `string`\r\nSpecify newline code: \"auto\" (default) or \"crlf\" or \"lf\". This options is experimental.\r\n\r\n###indentStep `number`\r\nSpecify space indent count for code generation: This value will be disregarded if the useTabIndent option is specified. This options is experimental.\r\n\r\n###useTabIndent `boolean`\r\nSpecify tab indent for code generation: false (default) or true. This options is experimental.\r\n\r\n###ignoreError `boolean`\r\nIf the compiler can create a file, the task ignores the error.\r\nDefault value is false.\r\n\r\n###disallowAsi `boolean`\r\nDo not allow auto semicolon insertion. This options is experimental.\r\n\r\n###basePath `string`\r\nPath component to cut off when mapping the source files to dest files.\r\n\r\n\r\nâ€»I'm sorry for poor English\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-typescript@0.3.0",
  "_from": "grunt-typescript@^0.3.0"
}
